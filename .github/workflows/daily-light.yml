concurrency:
  group: ke-top500-daily
  cancel-in-progress: true

name: Daily Refresh (RSS, no quota)
on:
  schedule:
    - cron: "15 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  refresh:
    runs-on: ubuntu-latest
    steps:
      # Checkout with write token AND full history (needed for rebase)
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0   # <â€” important

      # NEW: Setup Python for the 'Ensure channels.csv' step (uses pandas)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps (for make_channels_csv.py)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps (for RSS script)
        run: npm ci || npm i

      - name: Ensure channels.csv
        run: |
          if [ -f channels.csv ]; then
            echo "channels.csv present"
          elif [ -f top500_ranked.csv ]; then
            python scripts/make_channels_csv.py --ranked top500_ranked.csv --out channels.csv
          elif [ -f scripts/seed_channel_ids.txt ]; then
            awk 'BEGIN{print "rank,channel_id,channel_name"} {print NR "," $1 ",Seed Channel " NR}' scripts/seed_channel_ids.txt > channels.csv
            echo "Created channels.csv from seeds"
          else
            echo "ERROR: No channels.csv/top500_ranked.csv/seed_channel_ids.txt"
            exit 1
          fi
          echo "---- channels.csv (first 5 lines) ----"
          head -n 5 channels.csv || true

      - name: Refresh latest videos (Hybrid:RSS + API fallback)
        env:
          YT_API_KEY: ${{ secrets.YT_API_KEY }}  # optional: script works without, but fallback needs it
        run: node scripts/fetch_latest_top500_hybrid.js ./channels.csv ./public/data/top500.json


      - name: Commit updated JSON
        run: |
          # identify as a bot
          git config user.name "auto-bot"
          git config user.email "bot@example.com"
      
          # make sure we're on main and up-to-date before committing
          git checkout main
          git fetch origin main
          git pull --rebase origin main
      
          # stage and commit (no-op if unchanged)
          git add public/data/top500.json || true
          git commit -m "chore: daily rss refresh" || echo "No changes"
      
          # rebase again (guard against concurrent pushes during long runs)
          git fetch origin main
          git pull --rebase origin main
      
          # push with the workflow token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/stmonitoring2/ke-top500.git
          git push origin HEAD:main
